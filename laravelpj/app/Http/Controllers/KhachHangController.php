<?php

namespace App\Http\Controllers;

use App\Models\KhachHang;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Database\Eloquent\ModelNotFoundException;

class KhachHangController extends Controller
{
    public function index()
    {
        $dsKhach = KhachHang::paginate(10);
        return view('crud_user.Crud_Guest', compact('dsKhach'));
    }

    public function create()
    {
        return view('crud_user.Crud_GuestCreate');
    }

    public function store(Request $request)
    {
        $request->validate([
            'Ten' => [
                'required',
                'string',
                'max:75',
                'regex:/^[\p{L}\d\s]+$/u', // ch·ªâ ch·ªØ v√† kho·∫£ng tr·∫Øng
                function ($attribute, $value, $fail) {
                    if (preg_match('/\s{2,}/', $value)) {
                        $fail('T√™n kh√¥ng ƒë∆∞·ª£c ch·ª©a nhi·ªÅu kho·∫£ng tr·∫Øng li√™n ti·∫øp.');
                    }
                    if (preg_match('/^\s|\s$/', $value)) {
                        $fail('T√™n kh√¥ng ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu ho·∫∑c k·∫øt th√∫c b·∫±ng kho·∫£ng tr·∫Øng.');
                    }
                }
            ],
            'SoDienThoai' => [
                'required',
                'regex:/^0\d{8,10}$/',
                'regex:/^\S+$/'
            ],
            'Email' => [
                'required',
                'email',
                'regex:/^[a-zA-Z0-9._%+-]+@gmail\.com$/i',
                'unique:khach_hangs'
            ],
            'DiaChi' => 'nullable|string|max:255',
            'MatKhau' => [
                'required',
                'string',
                'min:6',
                'regex:/^\S+$/'
            ],
        ], [
            'Ten.required'         => 'Vui l√≤ng nh·∫≠p t√™n kh√°ch h√†ng.',
            'Ten.regex'            => 'T√™n ch·ªâ ƒë∆∞·ª£c ch·ª©a ch·ªØ c√°i v√† kho·∫£ng tr·∫Øng.',
            'SoDienThoai.required' => 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i.',
            'SoDienThoai.regex'    => 'S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 0 v√† c√≥ 9‚Äì11 ch·ªØ s·ªë.',
            'Email.required'       => 'Vui l√≤ng nh·∫≠p email.',
            'Email.regex'          => 'Email ph·∫£i l√† Gmail h·ª£p l·ªá.',
            'Email.unique'         => 'Email ƒë√£ t·ªìn t·∫°i.',
            'MatKhau.required'     => 'M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.',
            'MatKhau.regex'        => 'M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ch·ª©a kho·∫£ng tr·∫Øng.',
        ]);

        KhachHang::create([
            'Ten'         => trim($request->Ten),
            'SoDienThoai' => $request->SoDienThoai,
            'Email'       => $request->Email,
            'DiaChi'      => $request->DiaChi,
            'MatKhau'     => Hash::make($request->MatKhau),
        ]);

        return redirect()->route('khachhang')->with('success', 'Th√™m kh√°ch h√†ng th√†nh c√¥ng');
    }


    public function edit($id)
    {


        try {
            $khach = KhachHang::findOrFail($id);
        } catch (ModelNotFoundException $e) {
            return redirect()->route('khachhang')->with('error', 'Kh√¥ng t√¨m th·∫•y khach hangt c·∫ßn s·ª≠a.');
        }

        return view('crud_user.Crud_GuestEdit', compact('khach'));
    }

    public function update(Request $request, $id)
{
    try {
        $khach = KhachHang::findOrFail($id);
    } catch (ModelNotFoundException $e) {
        return redirect()->route('khachhang')->with('error', 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t.');
    }

    // üõ°Ô∏è Ki·ªÉm tra xung ƒë·ªôt d·ªØ li·ªáu
    $formUpdatedAt = $request->input('updated_at');
    if ($formUpdatedAt && $formUpdatedAt != $khach->updated_at->toDateTimeString()) {
        return redirect()->route('khachhang')->with('error', 'Kh√°ch h√†ng n√†y ƒë√£ ƒë∆∞·ª£c ng∆∞·ªùi kh√°c c·∫≠p nh·∫≠t tr∆∞·ªõc ƒë√≥. Vui l√≤ng t·∫£i l·∫°i trang.');
    }

    $request->validate([
        // (gi·ªØ nguy√™n to√†n b·ªô validate c≈©)
    ]);

    $data = $request->only(['Ten', 'SoDienThoai', 'Email', 'DiaChi']);
    $data['MatKhau'] = Hash::make($request->MatKhau);
    $data['Ten'] = trim($data['Ten']); // lo·∫°i b·ªè kho·∫£ng tr·∫Øng d∆∞

    $khach->update($data);

    return redirect()->route('khachhang')->with('success', 'C·∫≠p nh·∫≠t kh√°ch h√†ng th√†nh c√¥ng');
}



    public function destroy($id)
    {
        $khach = KhachHang::find($id);

        if (!$khach) {
            return redirect()->route('khachhang')->with('error', 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng ƒë·ªÉ xo√°. C√≥ th·ªÉ ƒë√£ b·ªã xo√°.');
        }

        $khach->delete();

        return redirect()->route('khachhang')->with('success', 'X√≥a kh√°ch h√†ng th√†nh c√¥ng');
    }
}
